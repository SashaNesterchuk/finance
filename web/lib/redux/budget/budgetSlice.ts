/* Core */
import { createSlice, type PayloadAction } from "@reduxjs/toolkit";

/* Instruments */
import { monthNames } from "@/app/use/useMonths";
import { fetchBudgetByMonthAndYear } from "./fetchBudget";
import { Budget } from "@/app/module";
import { fetchBudgetByMonthAndYearAsync } from "./thunks";

const initialState: TemplateSliceState = {
  budgetByMonthAndYear: undefined,
  month: new Date(),
  status: "idle",
};

export const budgetSlice = createSlice({
  name: "budget",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    decrementMonth: (state) => {
      const tmp = new Date(state.month);
      tmp.setMonth(
        state.month.getMonth() - 1 < 0
          ? monthNames.length - 1
          : state.month.getMonth() - 1
      );
      state.month = tmp;
    },
    incrementMonth: (state) => {
      const tmp = new Date(state.month);
      tmp.setMonth(
        state.month.getMonth() + 1 > monthNames.length - 1
          ? 0
          : state.month.getMonth() + 1
      );
      state.month = tmp;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchBudgetByMonthAndYearAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(fetchBudgetByMonthAndYearAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.budgetByMonthAndYear = action.payload;
      });
  },
});

/* Types */
export interface TemplateSliceState {
  budgetByMonthAndYear: Budget | undefined;
  month: Date;
  status: "idle" | "loading" | "failed";
}
